(q-transform/hint (quote (lambda (quote #t))) (quote (y b a 1 x)))
(q-transform/hint (quote (lambda (cdr (cdr (var ()))))) (quote ((() y . 1) (#f y () . #t) (#f b () b . y) (x #f (#f . #f) . #t) (a #f y x s . a))))
(q-transform/hint (quote (lambda (quote ()))) (quote (#f 1 a x b)))
(q-transform/hint (quote (lambda (quote a))) (quote (s a () x b)))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (var ()))))))) (quote ((a s x () . s) (s b y (1 . y)) (y s y (a () . a) . 1) (a 1 b ((b . s) . b) . 1) (1 x 1 (() s 1)))))
(q-transform/hint (quote (lambda (quote b))) (quote (b a x y s)))
(q-transform/hint (quote (lambda (car (cdr (cdr (car (var ()))))))) (quote (((x s #t . #t) . y) ((#f y (() . s) . #f) . x) ((#f () (() () . x) . 1) . 1) ((1 s ((b . #f) . s) . a) . #f) ((#t 1 (y #f x . x) . x) . s))))
(q-transform/hint (quote (lambda (quote 1))) (quote (#f b () s 1)))
(q-transform/hint (quote (lambda (cons (var ()) (cdr (cdr (var ())))))) (quote ((x a . s) (#f ()) (a () y . s) (1 1 . x) (x x () 1 . #f))))
(q-transform/hint (quote (lambda (cons (car (var ())) (quote x)))) (quote ((a) (#t . s) ((1 . y) . y) ((y 1 . s) . 1) (((x . x)) . y))))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (cdr (var ())))))))) (quote ((a s 1 x #f . #f) (#t s 1 #t (1 . 1) . 1) (1 #t a x (b y . b) . x) (a x 1 a ((#f . 1)) . s) (#f y #f s (a b #t) . #t))))
(q-transform/hint (quote (lambda (quote s))) (quote (s #f #t 1 y)))
(q-transform/hint (quote (lambda (quote (s)))) (quote (x 1 s () y)))
(q-transform/hint (quote (lambda (car (cdr (car (car (cdr (var ())))))))) (quote ((y ((#f a . b) . b) . b) (#f ((1 (#t . a) . y) . a) . b) (#t ((a (a s . y) . 1) . y) . x) (#t ((() ((s . s) . s) . y) . #t) . y) (x ((1 (s x x) . s) . #f) . y))))
(q-transform/hint (quote (lambda (cons (car (var ())) (car (car (var ())))))) (quote (((() . b) . y) ((() . b) . b) (((() . #t))) ((a . #t) . a) (((#f a . a)) . a))))
(q-transform/hint (quote (lambda (cdr (cdr (car (car (var ()))))))) (quote ((((() x . #f)) . b) (((y #t s . a) . y) . #f) (((#t s s x . x) . x)) (((x y (#f . y) . y))) (((#t s a b y . #t)) . b))))
(q-transform/hint (quote (lambda (car (car (cdr (car (car (var ())))))))) (quote ((((b (#f)) . s) . x) (((b ((y . b) . y) . 1) . 1) . b) (((#f ((s b . x) . x) . x) . #t) . 1) (((b (((x . 1) . #t) . #f)) . b) . 1) (((y ((b () () . y) . s) . s) . y) . a))))
(q-transform/hint (quote (lambda (quote (s . a)))) (quote (1 a y #t ())))
(q-transform/hint (quote (lambda (quote (s . b)))) (quote (1 x #f a b)))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (quote s)))) (quote (b 1 x (a . #f) (#f . a))))
(q-transform/hint (quote (lambda (cons (var ()) (cdr (cdr (cdr (var ()))))))) (quote ((#f y a . a) (s y #f . y) (y b () a . x) (1 #f 1 . b) (#f #f s a y . b))))
(q-transform/hint (quote (lambda (cons (var ()) (car (cdr (cdr (cdr (var ())))))))) (quote ((() a a #t . #t) (() y y s . #t) (() a x (x) . #f) (#t a b #f . b) (#t x 1 (() b)))))
(q-transform/hint (quote (lambda (cdr (car (cdr (cdr (cdr (var ())))))))) (quote ((#f b b (b . #f) . a) (#t s #t (1 #t . #t) . b) (#f a () (x 1 s . #f) . #t) (s 1 y (() (s . y) . x) . b) (b s b (() #t x #t . a) . a))))
(q-transform/hint (quote (lambda (cons (var ()) (cons (var ()) (car (car (var ()))))))) (quote (((a . b) . 1) ((#t . a) . s) ((s . b) . x) ((#t . #t) . #f) (((a . 1) . #f) . y))))
(q-transform/hint (quote (lambda (cdr (car (car (cdr (cdr (var ())))))))) (quote ((#t s ((#f . #t))) (b () ((#t () . a) . a) . s) (a #t ((#t s b . 1) . #f) . x) (s #t ((1 (s . #f) . 1) . s) . s) (#f a ((x y 1 a . #f) . y) . s))))
(q-transform/hint (quote (lambda (car (cdr (car (car (cdr (cdr (var ()))))))))) (quote ((#t y ((s #f . b) . x) . s) (y b ((b (a . 1) . b) . b) . #t) (a 1 ((s (a s . a) . s) . x) . #f) (#t #t ((y ((() . #f) . y) . #t) . #f) . b) (() 1 ((b (() x #t . x)) . #f) . s))))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (car (cdr (var ()))))))))) (quote ((1 (#t x #f y . #f) . s) (y (#f x x (x . y) . s)) (a (#f #t () (1 () . 1) . #f) . s) (1 (() a #t ((#f . #t) . 1) . a) . #t) (a (a #t x (() #f a . s) . 1) . 1))))
(q-transform/hint (quote (lambda (cons (var ()) (car (car (car (cdr (var ())))))))) (quote ((#f ((() . a) . x) . a) (b ((#f . b) . #t) . x) (x (((() . a) . #t) . s)) (s ((b . #t) . y) . s) (1 (((x s . #f) . s) . 1) . #f))))
(q-transform/hint (quote (lambda (car (cdr (cdr (car (car (cdr (var ()))))))))) (quote ((1 ((y y 1 . y) . 1)) (1 ((b #f (#t . y) . x) . #f)) (b ((() #f (x s . a) . b) . x) . s) (() ((y x ((x) . a) . 1) . #f) . y) (a ((x () (b y 1 . s) . s) . 1) . #f))))
(q-transform/hint (quote (lambda (cons (cdr (var ())) (cons (var ()) (var ()))))) (quote ((#t . #t) (y . #f) (x) (() b . b) (s . b))))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (cdr (car (var ()))))))))) (quote (((b s s #t ()) . y) ((s #f y x (1 . 1) . #t) . #t) ((s b #f x (y b) . #t) . #t) ((a x #f #f ((#t . y) . #f) . y) . 1) ((a () s #t (x x b . y) . #t) . b))))
(q-transform/hint (quote (lambda (car (cdr (car (cdr (cdr (car (var ()))))))))) (quote (((a y (#t 1 . b) . a) . 1) ((a x (() (#t . a) . b) . a) . b) ((() () (s (y #f . x) . y) . 1)) ((#t y (1 ((() . y) . a) . #t) . #t) . s) ((x s (x (a 1 b . y) . #f) . a) . #t))))
(q-transform/hint (quote (lambda (car (car (cdr (car (cdr (car (var ()))))))))) (quote (((#t (#t (x . 1) . #t) . #f) . s) ((s (s ((#f . x) . 1) . x) . #f) . 1) ((y (() ((a a . #f) . b) . s) . #t) . x) ((y (x (((() . a) . b) . x) . #f) . a) . y) ((y (b ((1 b #t . 1) . #t) . 1) . x) . #f))))
(q-transform/hint (quote (lambda (quote (() . a)))) (quote (() #t s 1 #f)))
(q-transform/hint (quote (lambda (cons (var ()) (car (car (car (car (var ())))))))) (quote (((((() . s) . y) . a) . x) ((((s . a) . a)) . y) (((((y . s) . x) . x) . 1) . 1) ((((s . x) . 1) . x) . #t) (((((#f b . b) . #f) . 1) . 1) . 1))))
(q-transform/hint (quote (lambda (car (cdr (cdr (car (car (car (var ()))))))))) (quote (((((b s #t . y) . s) . b) . #t) ((((a s (#t . s) . #f) . y) . a) . 1) ((((x x (#t () . x) . 1)) . #f) . y) ((((b a ((() . s)) . y) . #f) . s) . y) ((((() #f (#t () x . a) . x) . x) . y) . 1))))
(q-transform/hint (quote (lambda (car (car (car (car (car (car (var ()))))))))) (quote (((((((s . b) . #t) . a) . b) . 1) . a) (((((((b . 1) . a) . b) . #t) . s) . a)) (((((((#f #t . x) . y) . 1) . #f) . s) . #f) . x) ((((((((s . b) . a) . x) . s) . y) . #f) . #f) . #f) (((((((a s s . y)) . #f) . a) . a) . x) . a))))
(q-transform/hint (quote (lambda (quote (s . s)))) (quote (y b x #f s)))
(q-transform/hint (quote (lambda (quote (s . #f)))) (quote (s a b y ())))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cons (var ()) (car (var ())))))) (quote ((s . #f) (b . a) (() . b) (() . y) ((a . y) . #t))))
(q-transform/hint (quote (lambda (quote (() . 1)))) (quote (a x #f 1 s)))
(q-transform/hint (quote (lambda (cons (var ()) (cons (cons (var ()) (var ())) (car (var ())))))) (quote ((y . y) (b . b) (#t) (x . #f) ((#t . 1)))))
(q-transform/hint (quote (lambda (cons (var ()) (quote y)))) (quote (1 x (1 . a) (() () . y) ((b . s) . x))))
(q-transform/hint (quote (lambda (cons (var ()) (cons (var ()) (car (cdr (cdr (var ())))))))) (quote ((x 1 a . x) (#t 1 #t . s) (s a #f . s) (() #t s) (x a (s . #f) . y))))
(q-transform/hint (quote (lambda (quote (() . x)))) (quote (a 1 x #t s b)))
(q-transform/hint (quote (lambda (cons (var ()) (car (cdr (cdr (cdr (cdr (var ()))))))))) (quote ((y y () 1 x . a) (() a 1 a a . s) (#f () #t s (a . s) . #t) (y x #f 1 y . #f) (b #f y () (s #f . 1) . #f))))
(q-transform/hint (quote (lambda (cons (var ()) (cons (car (var ())) (car (cdr (var ()))))))) (quote ((() s . y) (x s . b) (#f x . #f) (1 s . a) (#f (a . b) . x))))
(q-transform/hint (quote (lambda (car (cdr (car (cdr (cdr (cdr (cdr (var ())))))))))) (quote ((1 b #f a (s #t . s) . a) (() () a #t (#t (a . a) . s) . #t) (y x a y (a (1 () . #t) . #t) . #t) (1 () y 1 (a ((b . #t)) . #f) . #t) (1 #t #t y (y (b s b . #t) . #f) . y))))
(q-transform/hint (quote (lambda (car (cdr (cdr (car (cdr (cdr (cdr (var ())))))))))) (quote ((a s #t (b 1 b . y) . #t) (() s #f (#f () (x . a) . x) . x) (#t y #f (1 () (#f x . s) . #f) . 1) (#f a 1 (1 b ((#f . #t) . #t) . #f) . x) (s #f () (x b (x () #f . s)) . y))))
(q-transform/hint (quote (lambda (cons (cdr (var ())) (car (cdr (var ())))))) (quote ((x s . #f) (#f a . #t) (s (s . s) . #f) (#t y) (() (#t 1 . x) . #f))))
(q-transform/hint (quote (lambda (cons (var ()) (cdr (cdr (car (cdr (var ())))))))) (quote ((1 (#f b . a) . 1) (s (#t () . x) . #f) (() (b x a . b) . #f) (a (s 1 . y) . b) (x (b 1 #t #f . #t) . b))))
(q-transform/hint (quote (lambda (car (car (cdr (cdr (car (cdr (cdr (var ())))))))))) (quote ((x 1 (y 1 (() . s)) . s) (a #f (b () ((a . x) . y) . 1) . #f) (b () (#t x ((b () . #f) . s) . #t) . b) (#t a (#t s (((y . y) . #f) . a) . #t) . b) (1 s (#f #t ((y b s . x) . #f) . x) . b))))
(q-transform/hint (quote (lambda (cdr (cdr (car (car (cdr (cdr (var ()))))))))) (quote ((s a ((1 () . y) . y) . y) (#t 1 ((1 y s . a) . s) . b) (1 #f ((s x 1 b . b) . a) . 1) (x a ((#f #f (1 . #t) . s) . 1) . y) (#f y ((y b () b #f . b))))))
(q-transform/hint (quote (lambda (car (cdr (cdr (car (car (cdr (cdr (var ())))))))))) (quote ((#f b ((1 b y . b) . x) . #t) (b b ((() a (x . b) . 1) . a) . b) (b 1 ((y x (1 b . b) . x) . b) . y) (a #f ((b s ((#f) . a) . b))) (b s ((#t x (s x b . b) . #t) . b) . s))))
(q-transform/hint (quote (lambda (car (cdr (car (car (car (cdr (cdr (var ())))))))))) (quote ((#f 1 (((1 y . x) . #f) . a) . b) (y y (((y (b . a) . a) . b) . 1) . #f) (x s (((#f (a #f . a) . b) . 1) . x) . 1) (a x (((x ((a . #f) . y) . x)) . 1) . s) (a b (((s (y a x . b) . x) . #t) . y) . 1))))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (cdr (car (cdr (var ())))))))))) (quote ((y (b 1 #f () x . s) . y) (#t (y y () x (b . 1) . a) . #f) (#t (y s () b (s 1 . 1) . 1) . x) (1 (() #f y a ((a . x) . 1) . #t) . s) (#t (a b x #f (() #t y . a) . 1) . a))))
(q-transform/hint (quote (lambda (car (cdr (car (cdr (cdr (car (cdr (var ())))))))))) (quote ((x (y y (s a . s) . a) . x) (1 (s () (x (#f . b) . 1) . x) . a) (1 (x x (#f (b b . x) . b) . s) . a) (b (x 1 (a ((#t . #t) . 1) . a) . #f) . x) (a (x y (b (#t #f () . y)) . 1)))))
(q-transform/hint (quote (lambda (cdr (car (car (cdr (car (cdr (var ()))))))))) (quote ((() (() ((b . b)) . y) . y) (() (x ((s () . x) . x) . #t) . y) (s (y ((() a #f . 1) . 1) . #t) . #f) (x (s ((#f (1 . 1)) . #t) . x) . #t) (() (a ((() y a b . x) . #t) . y) . b))))
(q-transform/hint (quote (lambda (car (cdr (car (car (cdr (car (cdr (var ())))))))))) (quote ((() (y ((a () . a) . s)) . #f) (b (a ((y (1 . 1)) . s) . b) . s) (() (a ((#f (b ()) . y) . b) . b) . y) (1 (s ((y ((s . x) . a) . s)) . a) . b) (#t (1 ((y (#f x #f . y) . #t) . x) . 1) . #f))))
(q-transform/hint (quote (lambda (quote (() . y)))) (quote (1 #t () a s)))
(q-transform/hint (quote (lambda (car (car (cdr (cdr (car (car (cdr (var ())))))))))) (quote ((() ((x x (a . 1) . #t) . 1) . #f) (#f ((y 1 ((1 . s) . #t) . s)) . b) (s ((y y ((b () . a)) . b) . 1) . x) (() ((() x (((#t . b) . #t) . #t)) . #f) . 1) (y ((s #t ((#f x #t . #f) . b) . a) . x) . b))))
(q-transform/hint (quote (lambda (car (car (car (cdr (car (car (cdr (var ())))))))))) (quote ((s ((b ((b . b) . b) . x) . x) . 1) (x ((s (((s . 1) . #f) . a) . #t) . x) . #t) (y ((1 (((x b . a) . 1) . b) . #t)) . s) (a ((a ((((b)) . #t) . y) . a) . x) . a) (y ((1 (((#t y #f . 1) . #t) . y) . a) . s) . a))))
(q-transform/hint (quote (lambda (cons (var ()) (car (cdr (cdr (cdr (car (var ()))))))))) (quote (((s #t #t s . y) . #t) ((#t #t s () . 1) . y) ((b b x (#f . a) . b) . y) ((#t b #f b . y) . s) ((1 b s (a s . #f) . x) . y))))
(q-transform/hint (quote (lambda (cons (var ()) (cdr (car (cdr (car (var ())))))))) (quote (((s (s . #t) . a) . 1) ((b (1 . #t) . x) . x) ((y (y () . 1) . a) . 1) ((b (y . #t) . s) . #f) ((x (#f a #f . y) . s) . s))))
(q-transform/hint (quote (lambda (car (car (cdr (cdr (cdr (cdr (car (var ())))))))))) (quote (((s () b b (#t . #f) . s) . 1) ((b 1 s a ((a . b) . #f) . 1) . #f) ((b 1 1 y ((() b . y) . s) . y) . b) ((() 1 () () (((#f . s) . s) . #f) . #t) . 1) ((b b x #t ((y 1 y . 1) . b) . x)))))
(q-transform/hint (quote (lambda (car (car (car (cdr (cdr (cdr (car (var ())))))))))) (quote (((y s a ((#t) . #f) . #t) . b) ((a a y (((s . s) . #t) . #t) . #t) . #t) ((() a b (((y y . #f) . s) . y) . #f) . y) ((#t a #t ((((#f . #f) . #f) . 1) . y)) . x) ((s y #f (((y #f x . 1) . s)) . #t)))))
(q-transform/hint (quote (lambda (car (car (cdr (car (cdr (cdr (car (var ())))))))))) (quote (((1 () (y (#f . a) . y) . #f) . b) ((y a (#f ((() . #f) . x) . #f)) . b) ((1 () (b ((() #f . #f) . a) . a) . a) . #t) ((a y (#t (((b . s) . x) . #t) . b) . x) . 1) ((#t x (() ((a y () . 1) . #f) . #t) . b) . s))))
(q-transform/hint (quote (lambda (car (car (car (car (cdr (cdr (car (var ())))))))))) (quote (((x () (((#t . b) . s) . x)) . s) ((1 #t ((((1 . s) . x) . 1) . #t)) . b) ((y () ((((#t s . s) . #f) . s) . #f)) . s) ((a y (((((() . #t) . s) . s)) . x) . s) . y) ((x #f ((((a #f #t . a) . 1) . b) . #t) . a) . b))))
(q-transform/hint (quote (lambda (cons (car (var ())) (car (car (cdr (car (var ())))))))) (quote (((1 (s . a) . a)) ((x (() . 1) . 1) . b) ((b ((() . 1) . a)) . x) ((#t (a) . y) . s) ((x ((#f () . #t) . s) . a) . #t))))
(q-transform/hint (quote (lambda (car (car (car (cdr (car (cdr (car (var ())))))))))) (quote (((() (a ((() . s) . #t) . b) . 1) . #t) ((x (a (((#f . x) . #t) . b) . a) . x) . x) ((s (a (((#f y . 1) . s) . a) . #f) . 1) . s) ((b (1 ((((y . y) . s) . s) . s) . #t) . a) . x) ((b (#f (((1 () #t . b) . y) . a) . #t) . 1) . y))))
(q-transform/hint (quote (lambda (car (cdr (car (car (car (cdr (car (var ())))))))))) (quote (((b (((y b . s) . y)) . a) . y) ((() (((b (a . x) . y) . #t) . #t) . x) . #f) ((s (((() (1 b . b) . a) . x) . a)) . x) ((1 (((a ((y . a) . x) . #f) . #f) . x) . s) . #t) ((#t (((s (x s s . y) . x) . a) . #t) . a) . y))))
(q-transform/hint (quote (lambda (car (cdr (cdr (cdr (cdr (car (car (var ())))))))))) (quote ((((a a s #f () . y) . x) . #t) (((a b x s (x . #f) . s) . s) . a) (((s a () b (x () . 1) . 1) . x) . a) (((a () () s ((a . 1) . s) . 1) . #t)) (((s b #f s (a 1 #t)) . #t) . b))))
(q-transform/hint (quote (lambda (car (cdr (car (cdr (cdr (car (car (var ())))))))))) (quote ((((s b (b #t . 1) . y) . x) . 1) (((() x (() (b . b)) . y) . a) . #f) (((x () (() (() #f . #f) . #f) . #t) . s) . a) (((y y (#t ((a . a)) . a) . x) . #f) . x) (((y b (#t (x #f #t . #t) . a) . 1) . #t) . #f))))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cons (cons (var ()) (var ())) (var ()))))) (quote (s #f #t (a . #f) x () (() . #f))))
(q-transform/hint (quote (lambda (car (cdr (car (car (cdr (car (car (var ())))))))))) (quote ((((() ((a a . a) . #f)) . b) . b) (((s ((#f (a . y) . 1) . 1) . x) . #f) . x) (((b ((() (#t a . b) . s) . #t) . #t) . a) . b) (((y ((#t ((x . y) . b) . x) . x) . b) . #t) . #f) (((s ((s (b y a . #f) . x)) . a) . y) . #f))))
(q-transform/hint (quote (lambda (cdr (car (cdr (car (car (car (var ()))))))))) (quote (((((#t (#t . s) . b)) . x) . y) ((((y (a #t . s) . x) . b) . s) . s) ((((#t (y y a . x) . y) . y) . x) . b) ((((1 (y (x . s) . #f) . x) . y) . 1) . s) ((((#f (s a x #f . y) . #f) . s) . #t) . #t))))
(q-transform/hint (quote (lambda (car (cdr (car (cdr (car (car (car (var ())))))))))) (quote (((((s (a #f . #t) . a) . b) . #f) . b) ((((() (#f (x . x) . a) . y) . #f) . #f) . s) ((((x (s (s () . #f) . s) . #t) . #t) . a) . y) ((((b (1 ((x . 1) . #f) . #f) . 1) . s) . #t) . #t) ((((y (#t (y s b . 1) . #t) . b)) . a)))))
(q-transform/hint (quote (lambda (cdr (car (car (car (car (car (var ()))))))))) (quote (((((((#t . #f) . y) . a)) . x) . s) ((((((#f s . x) . a) . y) . s) . 1) . 1) ((((((() s x . s) . s) . x)) . b) . #t) ((((((a (s)) . b) . s) . y)) . x) ((((((() () y () . b) . b) . b) . 1) . x) . #t))))
(q-transform/hint (quote (lambda (quote ((b . s))))) (quote (x () s 1 b)))
(q-transform/hint (quote (lambda (quote (() . #t)))) (quote (1 s y #f a)))
(q-transform/hint (quote (lambda (quote (() . #f)))) (quote (x b y () a #t)))
(q-transform/hint (quote (lambda (quote (s x . s)))) (quote (x () 1 #f s)))
(q-transform/hint (quote (lambda (cons (car (var ())) (quote x)))) (quote ((#f . b) (a) ((() . y) . 1) ((b b)) (((b . x) . 1) . y))))
(q-transform/hint (quote (lambda (quote (s x . #t)))) (quote (#f () b y #t)))
(q-transform/hint (quote (lambda (cons (car (var ())) (cons (car (var ())) (cdr (var ())))))) (quote ((#t) (1 . #f) (a . #t) ((y . #f) . x) (s () . 1))))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cons (var ()) (quote ()))))) (quote (s y 1 b (s . x))))
(q-transform/hint (quote (lambda (cons (car (var ())) (cons (var ()) (cdr (cdr (var ()))))))) (quote ((a y . b) (() x . #t) (#t a . #t) ((y . y) ()) (a a 1 . #f))))
(q-transform/hint (quote (lambda (cons (car (var ())) (cons (var ()) (cons (car (var ())) (var ())))))) (quote ((() . s) (#f . #f) (1 . y) ((1 . b)) (#f . x))))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cons (var ()) (car (cdr (var ()))))))) (quote ((1 a) (x a . #t) (#f () . b) (#t b . x) (#t (1 . a) . 1))))
(q-transform/hint (quote (lambda (cons (cdr (var ())) (cdr (cdr (var ())))))) (quote ((s #f . #f) (#f ()) (1 x #f . s) (x b . y) (1 #f #t 1 . y))))
(q-transform/hint (quote (lambda (cons (var ()) (cons (var ()) (cdr (cdr (cdr (var ())))))))) (quote ((b #f y . #f) (1 () #t . a) (b #t x . a) (#f 1 s) (#t () s () . #f))))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cdr (cdr (cdr (var ()))))))) (quote ((x b 1 . a) (b b () . #f) (1 () a () . 1) (y 1 x . #f) (y #f b #f a))))
(q-transform/hint (quote (lambda (quote (s x #f b)))) (quote (#f y b a x)))
(q-transform/hint (quote (lambda (cons (car (var ())) (cdr (cdr (cdr (cdr (var ())))))))) (quote ((x x #f a . s) (y () x () . a) (b y b x 1 . a) ((b . 1) 1 1 1 . #f) (b a #t y b #f . a))))
(q-transform/hint (quote (lambda (cons (car (var ())) (cons (var ()) (cdr (car (var ()))))))) (quote (((1 . 1) . x) ((() . s) . 1) ((a . 1) . x) ((#t . s) . s) ((x a . y) . y))))
(q-transform/hint (quote (lambda (cons (cons (var ()) (var ())) (cdr (car (cdr (var ()))))))) (quote ((y (#t) . 1) (b (1 . s) . a) (s (x b) . x) (1 (x . b) . #f) (() (1 s a . a) . x))))
(q-transform/hint (quote (lambda (car (car (cdr (cdr (cdr (cdr (cdr (cdr (var ()))))))))))) (quote ((s s #f s x 1 (1 . 1) . #f) (1 x 1 b a #t ((a . #f) . a) . a) (#t #f s #f 1 1 ((s #t . a) . s) . a) (#t #f #t x b #t (((#f . s) . a) . s) . b) (b y #f s () 1 ((x x y . #t) . y) . #t))))
(q-transform/hint (quote (lambda (car (car (car (cdr (cdr (cdr (cdr (cdr (var ()))))))))))) (quote ((#t () () 1 a ((a . s) . x) . y) (a #f #f x b (((s . #t) . #f) . x) . a) (() #f #f 1 s (((s s . 1) . #t) . 1) . y) (1 y #t #f () ((((x . #f) . b) . x) . b) . a) (x s () () #f (((() s 1) . 1) . #t)))))
(q-transform/hint (quote (lambda (car (car (cdr (car (cdr (cdr (cdr (cdr (var ()))))))))))) (quote ((x y y #t (s (#t . b) . a) . a) (() b s s (#t ((b . s) . #t) . #t) . s) (#f b #t #f (a ((y y . #t) . #t) . b) . y) (b x a y (y (((a . #t)) . #f) . #f) . s) (() #t 1 y (1 ((b a () . s) . 1) . x) . s))))
(q-transform/hint (quote (lambda (cdr (cdr (cdr (car (cdr (cdr (cdr (var ())))))))))) (quote ((y b a (#f a #f . y) . 1) (y () s (() #t () x . x) . a) (#t () s (#t #f 1 b #t . x) . x) (b x a (() () b (y) . 1) . #f) (s x s (#t x 1 1 a x . a) . y))))
